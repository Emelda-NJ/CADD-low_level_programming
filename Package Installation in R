# CRAN and Bioconductor
R provides a comprehensive ecosystem of packages available through CRAN (Comprehensive R Archive Network) and Bioconductor for various tasks, especially in bioinformatics.

# Installing and Loading Packages

1. CRAN Packages
To install and load a CRAN package, use install.packages and library functions.

# Install the 'stringr' package
install.packages("stringr")
# Load the 'stringr' package
library(stringr)

# Example usage
# Create a vector of names
name_vector <- c("Seeta M", "Harry S", "Myra S", "Dolly P")
# Extract the first name from each full name in the vector
first_name <- str_extract(name_vector, "\\b\\w+\\b")
# Print the extracted first names
print(first_name)

# Output: [1] "Seeta" "Harry" "Myra"  "Dolly"

# NOTE: str_extract is a function from the stringr package that extracts the first instance of a pattern from each string in a vector.
The pattern \\b\\w+\\b is a regular expression used to match the first word in each string.
\\b denotes a word boundary, ensuring the match starts at the beginning of a word.
\\w+ matches one or more word characters (letters, digits, and underscores).
Another \\b ensures the match ends at the word boundary.
This regular expression effectively extracts the first word from each string in name_vector.

2. Bioconductor Packages
Bioconductor is a project that provides tools for the analysis and comprehension of high-throughput genomic data.

# Install the BiocManager package if not already installed
if (!require("BiocManager", quietly = TRUE)) 
  install.packages("BiocManager")

# Install the 'Biobase' package
BiocManager::install("Biobase")
# Load the 'Biobase' package
library(Biobase)

# Example usage
This code demonstrates how to create an ExpressionSet object, which is a common data structure used in Bioconductor for storing and managing high-throughput genomic data;
This integration of expression data and phenotype data into a structured ExpressionSet object is a powerful tool for managing and analyzing genomic data in R using Bioconductor.
# Ensures reproducibility of random number generation
set.seed(123)
# Generates a 10x10 matrix of random numbers (gene expression data)
expression_data <- matrix(rnorm(100), ncol=10)
# Assigns column names to the expression data matrix
colnames(expression_data) <- paste0("Sample", 1:10)
# Creates phenotype data indicating which samples are 'Control' and 'Treatment'
pheno_data <- data.frame(Group=c(rep("Control", 5), rep("Treatment", 5)))

# Annotated DataFrame
# Converts the phenotype data to an AnnotatedDataFrame object
pd <- new("AnnotatedDataFrame", data=pheno_data)
# NOTE: pd outputs metadata of the data set
Output:
An object of class 'AnnotatedDataFrame'
  rowNames: 1 2 ... 10 (10 total)
  varLabels: Group
  varMetadata: labelDescription

# Creates an ExpressionSet object that combines expression data and annotated phenotype data
eset <- ExpressionSet(assayData=expression_data, phenoData=pd)
# Prints a summary of the ExpressionSet object
print(eset)
Output:
ExpressionSet (storageMode: lockedEnvironment)
assayData: 10 features, 10 samples 
  element names: exprs 
protocolData: none
phenoData: none
featureData: none
experimentData: use 'experimentData(object)'
Annotation:  

# Details:
- rnorm(100) generates 100 random numbers from a standard normal distribution (mean = 0, sd = 1).
- matrix(..., ncol=10) arranges these 100 numbers into a matrix with 10 columns. The resulting matrix has 10 columns and 10 rows.
- paste0("Sample", 1:10) creates a vector of strings: "Sample1", "Sample2", ..., "Sample10". These strings are set as the column names of the expression_data matrix.
- rep("Control", 5) creates a vector with 5 "Control" entries.
- rep("Treatment", 5) creates a vector with 5 "Treatment" entries.
- These vectors are combined into a single vector and assigned to the Group column of the pheno_data data frame.
- AnnotatedDataFrame is a class used in Bioconductor to store phenotype data with additional annotation.
- ExpressionSet is a class used in Bioconductor to encapsulate both the assay data (expression data) and the phenotype data.
- assayData=expression_data assigns the expression data matrix to the ExpressionSet.
- phenoData=pd assigns the annotated phenotype data to the ExpressionSet.

3. GRanges for Genomic Ranges
GRanges is used for representing and manipulating genomic ranges and their associated data.

# Install BiocManager if not already installed
if (!requireNamespace("BiocManager", quietly = TRUE)) {
  install.packages("BiocManager")
}
# Install GenomicRanges if not already installed
if (!requireNamespace("GenomicRanges", quietly = TRUE)) {
  BiocManager::install("GenomicRanges")
}
# Load the GenomicRanges library
library(GenomicRanges)


# Example 1
# Create the GRanges Object
The GRanges object is created using the GRanges constructor. This object represents genomic ranges and can store additional metadata.
- seqnames (Sequence Names): This argument specifies the chromosome names (or sequence names) for each range. It uses the Rle (Run-Length Encoding) class to store these names efficiently.
In the example, the first 3 ranges belong to "chr1" and the next 2 ranges belong to "chr2".
- ranges (IRanges Object): This argument specifies the start positions and widths of the genomic ranges. The IRanges constructor is used to create this object.
In the example, this creates 5 ranges starting at positions 1, 2, 3, 4, and 5, each with a width of 10 bases.
- strand (Strand Information): This argument specifies the strand information for each range. It uses the Rle class with the strand function to create strand information.
In the example, this specifies the strand information as "+", "-", "*", "+", and "-" for the 5 ranges.

The code creates a GRanges object representing 5 genomic ranges across two chromosomes (chr1 and chr2) with specific start positions, widths, and strand information. 
This object is printed to display the genomic ranges and their associated metadata.
gr <- GRanges(seqnames=Rle(c("chr1", "chr2"), c(3, 2)),
              ranges=IRanges(1:5, width=10),
              strand=Rle(strand(c("+", "-", "*", "+", "-"))))
print(gr)

# Output:
GRanges object with 5 ranges and 0 metadata columns:
      seqnames    ranges strand
         <Rle> <IRanges>  <Rle>
  [1]     chr1      1-10      +
  [2]     chr1      2-11      -
  [3]     chr1      3-12      *
  [4]     chr2      4-13      +
  [5]     chr2      5-14      -


# Example 2
This block of code defines two sets of genomic ranges using the GRanges class from the GenomicRanges package.
# Define genomic ranges
gr <- GRanges(seqnames = Rle(c("chr1", "chr1", "chr2")),
              ranges = IRanges(start = c(100, 300, 150), end = c(200, 350, 250)),
              strand = Rle(c("+", "-", "+")),
              score = c(5.1, 2.2, 3.8))
print(gr)
# Output:
GRanges object with 3 ranges and 1 metadata column:
seqnames ranges strand | score
   <Rle> <IRanges> <Rle> | <numeric>
[1] chr1 100-200 + | 5.1
[2] chr1 300-350 - | 2.2
[3] chr2 150-250 + | 3.8
seqinfo: 2 sequences from an unspecified genome; no seqlengths

# Define another set of genomic ranges
gr2 <- GRanges(seqnames = Rle(c("chr1", "chr2")),
               ranges = IRanges(start = c(150, 200), end = c(250, 300)),
               strand = Rle(c("+", "+")))
print(gr2)
# Output:
GRanges object with 2 ranges and 0 metadata columns:
seqnames ranges strand
   <Rle> <IRanges> <Rle>
[1] chr1 150-250 +
[2] chr2 200-300 +
seqinfo: 2 sequences from an unspecified genome; no seqlengths


This block of code finds overlaps between the two sets of genomic ranges (gr and gr2) and prints the results.
# Find overlaps between gr and gr2
overlaps <- findOverlaps(gr, gr2)

# Print the overlaps
print(overlaps)
# Output:
Hits object with 2 hits and 0 metadata columns:
  queryHits subjectHits
     <integer> <integer>
[1]          1           1
[2]          3           2
queryLength: 3 / subjectLength: 2


This block of code annotates the genomic ranges with additional metadata and subsets the ranges based on a condition.
# Annotate with additional metadata
mcols(gr)$gene <- c("gene1", "gene2", "gene3")

# Subset ranges based on a condition
subset_gr <- gr[score(gr) > 3]

# Print the subset of genomic ranges
print(subset_gr)
# Output:
GRanges object with 2 ranges and 2 metadata columns:
seqnames ranges strand | score gene
   <Rle> <IRanges> <Rle> | <numeric> <character>
[1] chr1 100-200 + | 5.1 gene1
[2] chr2 150-250 + | 3.8 gene3
seqinfo: 2 sequences from an unspecified genome; no seqlengths


4. Data Manipulation with dplyr
The dplyr package is used for data manipulation. Key functions include select, filter, arrange, mutate, group_by, and summarise.

# Install and load the 'dplyr' package
install.packages("dplyr")
library(dplyr)

# Example usage with iris dataset
data(iris)
View(iris)

# Filter data
filtered_data <- iris %>%
  select(Sepal.Length, Sepal.Width) %>%
  filter(Sepal.Length > 5)

print(filtered_data)
print(dim(filtered_data))
print(dim(iris))

# NOTE: The %>% operator is known as the pipe operator and is used to chain together multiple functions.
iris %>%: This starts the pipeline with the iris dataset.
select(Sepal.Length, Sepal.Width): This selects only the Sepal.Length and Sepal.Width columns from the iris dataset.
filter(Sepal.Length > 5): This filters the rows of the dataset to keep only those where Sepal.Length is greater than 5.
prints the filtered_data dataset, which contains only the Sepal.Length and Sepal.Width columns for rows where Sepal.Length is greater than 5.

# Arrange data
# Arrange data by Petal.Length in descending order
arrange_data <- iris %>%
  arrange(desc(Petal.Length))
View(arrange_data)
dim(arrange_data)
# Output:
This will show the iris dataset arranged by Petal.Length in ascending order with dimensions (150, 5)

# Arrange data by Petal.Length in ascending order
arrange_data <- iris %>%
  arrange(Petal.Length)
View(arrange_data)
dim(arrange_data) # Output: [1] 150 5

# Mutate data
# Mutate data to add a new column total_length
mutate_data <- iris %>%
  arrange(desc(Petal.Length)) %>%
  mutate(total_length = Sepal.Length + Petal.Length)
View(mutate_data)
dim(mutate_data) # Output: [1] 150 6
# Output:
The mutate_data will have an additional column total_length, which is the sum of Sepal.Length and Petal.Length. The dimensions will be (150, 6).
names(mutate_data)
# Output: [1] "Sepal.Length" "Sepal.width" "Petal. Length" "Petal.width" "Species" "total length"

# Grouping and summarizing data by Species
summarise_iris <- iris %>%
  group_by(Species)
print(summarise_iris)
# Output:
 A tibble: 150 x 5
 Groups: Species [3]
     Sepal.Length   Sepal.Width   Petal.Length   Petal.Width     Species
       <dbl>          <dbl>         <dbl>           <dbl>         <fct>
 1      5.1            3.5           1.4             0.2          setosa
 2      4.9            3.0           1.4             0.2          setosa
 3      4.7            3.2           1.3             0.2          setosa
 4      4.6            3.1           1.5             0.2          setosa
 5      5.0            3.6           1.4             0.2          setosa
 6      5.4            3.9           1.7             0.4          setosa
 7      4.6            3.4           1.4             0.3          setosa
 8      5.0            3.4           1.5             0.2          setosa
 9      4.4            2.9           1.4             0.2          setosa
 10     4.9            3.1           1.5             0.1          setosa
 140 more rows

summarise_iris <- iris %>%
  group_by(Species) %>%
  summarise(avg_mean = mean(Sepal.Length))
View(summarise_iris)
dim(summarise_iris)  # Output: [1] 150 5
print(summarise_iris)
# Output:
# A tibble: 3 × 2
  Species    avg_mean
  <fct>        <dbl>
1 setosa        5.01
2 versicolor    5.94
3 virginica     6.59
